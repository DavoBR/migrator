name: CI
on:
  push:
    branches: [ master ]
    paths-ignore:
      - '.vscode/**'
      - '.github/**'
      - '**.gitignore'
      - '.metadata'
      - '.README.md'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - '.vscode/**'
      - '.github/**'
      - '**.gitignore'
      - '.metadata'
      - '.README.md'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Prepare
        id: 'vars'
        env:
          GITHUB_CONTEXT: ${{toJson(github)}}
        shell: bash
        run: |
          echo ::set-output name=create_release::${{contains(github.ref, 'master')}}    
          echo "$GITHUB_CONTEXT"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'   
          
      - name: Bump version and push tag
        uses: mathieudutour/github-tag-action@v5
        id: tag
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}  
          dry_run: ${{!contains(github.ref, 'master')}}
          append_to_pre_release_tag: ${{github.head_ref}}
          pre_release_branches: '^((master(?!$)).+|(?!master).+)$'

      - name: Define version in file
        id: version
        env:
          VERSION: ${{steps.tag.outputs.new_version}}
          BRANCH_NAME: ${{github.head_ref}}
        run: 'python ./.github/workflows/after_bump_version.py' 
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          channel: stable
          flutter-version: '2.0.4'

      - run: flutter config --enable-windows-desktop
      - run: flutter pub get
      #- run: flutter test
      - run: flutter build windows

      - name: Upload portable artifact
        uses: actions/upload-artifact@v2
        with:
          name: 'migrator-${{steps.version.outputs.long}}-win-x64'
          path: ${{github.workspace}}/build/windows/runner/Release/

      - name: Download NSIS Installer
        uses: carlosperate/download-file-action@v1.0.3
        if: steps.vars.outputs.create_release == 'true'
        with:
          file-url: https://prdownloads.sourceforge.net/nsis/nsis-3.06.1-setup.exe?download
          file-name: nsis-setup.exe
          location: ${{github.workspace}}

      - name: Install NSIS 
        if: steps.vars.outputs.create_release == 'true'
        run: ./nsis-setup.exe /S

      - name: Download Visual C++ Runtimes
        uses: carlosperate/download-file-action@v1.0.3
        if: steps.vars.outputs.create_release == 'true'
        with:
          file-url: https://aka.ms/vs/16/release/vc_redist.x64.exe
          file-name: VC_redist.x64.exe
          location: ${{github.workspace}}\installer\deps
       
      - name: Create Installer
        shell: cmd
        run: '"C:\Program Files (x86)\NSIS\makensis.exe" -V4 script.nsi'
        if: steps.vars.outputs.create_release == 'true'
        working-directory: ./installer

      - name: Extract installer info
        id: installer
        if: steps.vars.outputs.create_release == 'true'
        run: 'python ../.github/workflows/after_create_installer.py' 
        working-directory: ./installer

      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        if: steps.vars.outputs.create_release == 'true'
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          draft: true
          tag_name: ${{steps.tag.outputs.new_tag}}
          release_name: Release ${{steps.tag.outputs.new_tag}}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        if: steps.vars.outputs.create_release == 'true'
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}} 
          asset_path: './installer/${{steps.installer.outputs.name}}'
          asset_name: ${{steps.installer.outputs.name}}
          asset_content_type: application/octet-stream
