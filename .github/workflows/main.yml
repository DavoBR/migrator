name: CI
on:
  push:
    branches:
      - master 

  pull_request:
    branches: 
      - master
  
  workflow_dispatch:
    inputs:
      bump:
        description: 'bump type, major or minor or patch or empty string'
        default: ''
        required: true
      dry_run:
        description: 'dry run, true or false'
        default: 'false'
        required: false
      draft:
        description: 'draft, true or false'
        default: 'true'
        required: false
      pre_release:
        description: 'pre release, true or false'
        default: 'false'
        required: false
jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Bump version 
        uses: MeilCli/bump-release-action@v1
        if: github.event_name == 'push'
        id: bump
        with:
          config_path: '.github/bump.yml'
          bump: ${{ github.event.inputs.bump }}
          dry_run: ${{ github.event.inputs.dry_run }}
          draft: ${{ github.event.inputs.draft }}
          pre_release: ${{ github.event.inputs.pre_release }}

      - name: Version
        id: version
        shell: bash
        env:
          NEXT_VERSION: ${{ steps.bump.outputs.next_version }}
        run: |
          if [ -z "$NEXT_VERSION" ] 
          then
            echo '::set-output name=next_version::0.0.0'
          else
            echo "::set-output name=next_version::$NEXT_VERSION"
          fi 

      - name: Update version in files
        shell: bash
        env:
          NEXT_VERSION: ${{ steps.version.outputs.next_version }}
        run: |
          major=$(echo $NEXT_VERSION | cut -d '.' -f1)
          minor=$(echo $NEXT_VERSION | cut -d '.' -f2)
          patch=$(echo $NEXT_VERSION | cut -d '.' -f3)

          sed -i "s/1,0,0/$major,$minor,$patch/g" ./windows/runner/Runner.rc
          sed -i "s/1.0.0/$NEXT_VERSION/g" ./windows/runner/Runner.rc

          sed -i "s/VERSIONMAJOR 1/VERSIONMAJOR $major/g" ./installer/script.nsi
          sed -i "s/VERSIONMINOR 0/VERSIONMINOR $minor/g" ./installer/script.nsi
          sed -i "s/VERSIONBUILD 0/VERSIONBUILD $patch/g" ./installer/script.nsi

          sed -i "s/APP_VERSION 'debug'/APP_VERSION '$NEXT_VERSION'/g" ./lib/utils/constants.dart

      - name: Setup java
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'   
          
      - name: Setup flutter
        uses: subosito/flutter-action@v1
        with:
          channel: stable
          flutter-version: '2.0.4'

      - run: flutter config --enable-windows-desktop
      - run: flutter pub get
      #- run: flutter test
      - run: flutter build windows

      - name: Download NSIS installer
        uses: carlosperate/download-file-action@v1.0.3
        with:
          file-url: https://prdownloads.sourceforge.net/nsis/nsis-3.06.1-setup.exe?download
          file-name: nsis-setup.exe
          location: ${{github.workspace}}

      - name: Install NSIS 
        run: ./nsis-setup.exe /S

      - name: Download visual C++ runtimes
        uses: carlosperate/download-file-action@v1.0.3
        with:
          file-url: https://aka.ms/vs/16/release/vc_redist.x64.exe
          file-name: VC_redist.x64.exe
          location: ${{github.workspace}}\installer\deps
       
      - name: Create installer
        shell: cmd
        run: '"C:\Program Files (x86)\NSIS\makensis.exe" -V4 script.nsi'
        working-directory: ./installer

      - name: Upload portable artifact
        uses: actions/upload-artifact@v2
        with:
          name: 'migrator-v${{ steps.version.outputs.next_version }}-win-x64'
          path: ${{github.workspace}}/build/windows/runner/Release/

      - name: Upload installer artifact
        uses: actions/upload-artifact@v2
        with:
          name: 'migrator-v${{ steps.version.outputs.next_version }}-win-x64-setup'
          path: ${{github.workspace}}/installer/setup.exe

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        if: github.event_name == 'push'  
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ fromJson(steps.bump.outputs.release).upload_url }} 
          asset_path: '${{github.workspace}}/installer/setup.exe'
          asset_name: 'CA_API_Gateway_Migrator_v${{ steps.bump.outputs.next_version }}.exe'
          asset_content_type: application/octet-stream
